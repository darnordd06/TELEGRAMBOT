import requests
import datetime
import pymysql
import random
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram_broadcaster import TextBroadcaster
from datetime import datetime



want_to_delete = False
bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)
host = 'us-cdbr-east-04.cleardb.com'
user = 'b13eaec48b53d9'
password = '2d1e7f9d'
db_name = 'heroku_8a31d2d930d7be3'



@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    connect = pymysql.connect(
        host=host,
        port=3306,
        user=user,
        password=password,
        database=db_name,
        cursorclass=pymysql.cursors.DictCursor
    )
    cursor = connect.cursor()
    #cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(id INTEGER)""")
    #connect.commit()

    # check id in fields
    people_id = message.chat.id
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        sqlreq = f"""INSERT INTO login_id (id, first_name, last_name) VALUES ('{people_id}', '{user_first_name}', '{user_last_name}')"""
        cursor.execute(sqlreq)
        connect.commit()
        await bot.send_message(89930973, f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {people_id}, {user_first_name} {user_last_name}')
        await bot.send_message(1878928932, f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {people_id}, {user_first_name} {user_last_name}')
    #else:
     #   print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {people_id} —É–∂–µ –≤ –±–∞–∑–µ!')
    await message.answer("üèôÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ")


@dp.message_handler(commands=['delete'])
async def delete_from_db(message: types.Message):
    global want_to_delete
    if message.chat.id == 89930973:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ')
        want_to_delete = True
    else:
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')
       # print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /delete')


@dp.message_handler()
async def get_weather(message: types.Message):
    global want_to_delete
    if want_to_delete:
        connect = pymysql.connect(
            host=host,
            port=3306,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        cursor = connect.cursor()
        people_id = int(message.text)
        cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
        connect.commit()
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω')
        want_to_delete = False
    else:
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ \U00002600",
            "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
            "Rain": "–î–æ–∂–¥—å \U00002614",
            "Drizzle": "–î–æ–∂–¥—å \U00002614",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
            "Snow": "–°–Ω–µ–≥ \U0001F328",
            "Mist": "–¢—É–º–∞–Ω \U0001F32B"
        }

        try:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric")
            data = r.json()
            city = data["name"]
            cur_weather = data["main"]["temp"]

            weather_description = data["weather"][0]["main"]
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.fromtimestamp(
                data["sys"]["sunset"]) - datetime.fromtimestamp(data["sys"]["sunrise"])

            cold_list = [
                f'–°–µ–≥–æ–¥–Ω—è —Ç–æ–ª—å–∫–æ –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —Ç–µ–ø–ª—ã–µ —à—Ç–∞–Ω—ã –∏ –≤–∞—Ä–µ–∂–∫–∏\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É —Å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∞–º–∏\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                f'–°–µ–≥–æ–¥–Ω—è –Ω–∞–¥–µ–≤–∞–π—Ç–µ —Ç–µ–ø–ª—ã–µ —à—Ç–∞–Ω—ã —Å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∞–º–∏ –∏ –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞']
            cold_list_random = random.randint(0, 2)

            not_so_cold = [f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –Ω–µ –æ—á–µ–Ω—å —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                           f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –æ—Å–µ–Ω–Ω—é—é –∫—É—Ä—Ç–∫—É, –Ω–æ —Å —à–∞–ø–∫–æ–π, —É–≤—ã\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                           f'–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å –∫—É—Ä—Ç–∫—É –∏ —à–∞–ø–∫—É —Å —à–∞—Ä—Ñ–æ–º\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞']
            not_so_cold_random = random.randint(0, 2)

            cold_but_not_so_cold = [
                f'–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–∏—Ç–µ—Ä–∞ —Å —Ç–µ–ø–ª–æ–π –∫—É—Ä—Ç–∫–æ–π\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Å–≤–∏—Ç–µ—Ä –ø–æ–¥ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞',
                f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É —Å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∞–º–∏ –∏ –¥–∂–∏–Ω—Å–∞–º–∏\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞']

            cold_but_not_so_cold_random = random.randint(0, 2)

            if cur_weather < 10 and cur_weather > -5 and wind > 5 and wind < 10:  # –ù–ï –•–û–õ–û–î–ù–û, –ù–û –í–ï–¢–ï–† –í–´–®–ï –ù–û–†–ú–´ –î–û 10 –ú/–°
                await message.reply(
                    f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –Ω–µ –æ—á–µ–Ω—å —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞')

            elif cur_weather < -20:  # –û–ß–ï–ù–¨ –•–û–õ–û–î–ù–û
                await message.reply(cold_list[cold_list_random])

            elif cur_weather < -5 and cur_weather > -20:  # –î–û–°–¢–ê–¢–û–ß–ù–û –•–û–õ–û–î–ù–û
                await message.reply(not_so_cold[cold_but_not_so_cold_random])

            elif cur_weather < 10 and cur_weather > -5:  # –ù–ï –û–ß–ï–ù–¨ –•–û–õ–û–î–ù–û
                await message.reply(not_so_cold[not_so_cold_random])

            elif cur_weather > 20 and wd == '–î–æ–∂–¥—å \U00002614':
                await message.reply(
                    f'–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à–æ—Ä—Ç—ã –∏ –º–∞–π–∫—É, –Ω–µ –∑–∞–±—ã–≤–∞—è –æ –∑–æ–Ω—Ç–∏–∫–µ\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞')
            elif cur_weather > 25 and wd == '–Ø—Å–Ω–æ \U00002600' and humidity < 50:
                await message.reply(f'–ù–∞–¥–µ–≤–∞–π—Ç–µ —à–æ—Ä—Ç—ã –∏ –º–∞–π–∫—É, –ø–æ–º–Ω–∏—Ç–µ –æ –ø–∞–ª—è—â–µ–º —Å–æ–ª–Ω—Ü–µ ‚òÄÔ∏è\n'
                                    f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤–æ–¥—É, –º–∞–ª–µ–Ω—å–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å üíß\n{wd} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)} C¬∞')
            else:
                await message.reply(f"***{datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                                    f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                                    f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}"
                                    )
        except:
            await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")


if __name__ == '__main__':
    executor.start_polling(dp)
