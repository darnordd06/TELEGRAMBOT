import sqlite3
import requests
import telebot

bot = telebot.TeleBot('2119118487:AAFvr-PCSNt2Brv3o6iVG-TYIWrbF1TbbyQ')

otvet = telebot.types.InlineKeyboardMarkup(row_width=1)
new_button1 = telebot.types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data='good')
otvet.add(new_button1)

mm = telebot.types.ReplyKeyboardMarkup(True)
button1 = telebot.types.KeyboardButton('–ò–≥—Ä–∞—Ç—å')
button2 = telebot.types.KeyboardButton('–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
button3 = telebot.types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
mm.row(button1)
mm.row(button2, button3)

game_count = 0
win_count = 0
lose_count = 0
withdraw_count = 0
deposit_count = 0


@bot.message_handler(commands=['start'])
def send_welcome(message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
        id INTEGER
    )""")

    connect.commit()

    # check id in fields
    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        # add values in fields
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO login_id VALUES(?);", user_id)
        connect.commit()
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@bot.message_handler(commands=['delete'])
def delete_from_db(message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    people_id = message.chat.id
    cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
    connect.commit()
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "good":
                bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏–Ω—è—Ç—ã")
                bot.send_message(message.from_user.id,
                                 f'üôãüèª‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b> \n –ú—ã '
                                 f'–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –í–∞–º '
                                 f'–Ω–∞—à—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞ –∑–Ω–∞–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏.', reply_markup=mm,
                                 parse_mode='HTML')


    except Exception as e:
        print(repr(e))


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç!')
    elif message.text.lower() == '—Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(message.from_user.id, 'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @–†–∞–Ω–¥–æ–º–Ω—ã–π–ù–∏–∫')
    elif message.text.lower() == '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
        bot.send_message(message.from_user.id, f'<b> üí∏ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç </b> \n\n –ë–∞–ª–∞–Ω—Å: 0.0 ‚ÇΩ (0.0 ‚Ç¥) \n\n'
                                               f'<b>‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç </b> \n\n'
                                               f'–ò–≥—Ä –≤—Å–µ–≥–æ - {game_count} \n–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ - '
                                               f'{win_count} \n'
                                               f'–ò–≥—Ä –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ - {lose_count}\n\n'
                                               f'–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ - {withdraw_count}\n'
                                               f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π - {deposit_count} \n\n'
                                               f'üßôüèª‚Äç‚ôÇÔ∏è –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - ', parse_mode='HTML')
    else:
        bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç.')


bot.polling(none_stop=True)
